directive @hasRole(role: String) on FIELD

enum ActionType {
  QUERY
  MUTATION
}

input BlockIn {
  id: String
  title: String
  text: Wysiwyg
  content: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type BlockList {
  documents: [BlockOut]
  totalCount: Int
  hasMore: Boolean
}

type BlockMutation {
  create(data: BlockIn!): BlockOut
  update(id: String!, data: BlockIn!): BlockOut
  delete(id: String!): Void
}

type BlockOut {
  id: String
  title: String
  text: Wysiwyg
  content: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type BlockQuery {
  get(id: String!): BlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): BlockList
}

input BoxesBlockIn {
  id: String
  title: String
  description: Text
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

input BoxesBlockItemIn {
  id: String
  title: String
  description: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type BoxesBlockItemList {
  documents: [BoxesBlockItemOut]
  totalCount: Int
  hasMore: Boolean
}

type BoxesBlockItemMutation {
  create(data: BoxesBlockItemIn!): BoxesBlockItemOut
  update(id: String!, data: BoxesBlockItemIn!): BoxesBlockItemOut
  delete(id: String!): Void
}

type BoxesBlockItemOut {
  id: String
  title: String
  description: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type BoxesBlockItemQuery {
  get(id: String!): BoxesBlockItemOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): BoxesBlockItemList
}

type BoxesBlockList {
  documents: [BoxesBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type BoxesBlockMutation {
  create(data: BoxesBlockIn!): BoxesBlockOut
  update(id: String!, data: BoxesBlockIn!): BoxesBlockOut
  delete(id: String!): Void
}

type BoxesBlockOut {
  id: String
  title: String
  description: Text
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type BoxesBlockQuery {
  get(id: String!): BoxesBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): BoxesBlockList
}

input ButtonIn {
  id: String
  text: String
  color: Color
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ButtonList {
  documents: [ButtonOut]
  totalCount: Int
  hasMore: Boolean
}

type ButtonMutation {
  create(data: ButtonIn!): ButtonOut
  update(id: String!, data: ButtonIn!): ButtonOut
  delete(id: String!): Void
}

type ButtonOut {
  id: String
  text: String
  color: Color
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ButtonQuery {
  get(id: String!): ButtonOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ButtonList
}

input ClientIn {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientList {
  documents: [ClientOut]
  totalCount: Int
  hasMore: Boolean
}

type ClientMutation {
  create(data: ClientIn!): ClientOut
  update(id: String!, data: ClientIn!): ClientOut
  delete(id: String!): Void
}

type ClientOut {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientQuery {
  get(id: String!): ClientOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ClientList
}

input ClientsBlockIn {
  id: String
  title: String
  description: Wysiwyg
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientsBlockList {
  documents: [ClientsBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type ClientsBlockMutation {
  create(data: ClientsBlockIn!): ClientsBlockOut
  update(id: String!, data: ClientsBlockIn!): ClientsBlockOut
  delete(id: String!): Void
}

type ClientsBlockOut {
  id: String
  title: String
  description: Wysiwyg
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientsBlockQuery {
  get(id: String!): ClientsBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ClientsBlockList
}

input ClientsIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientsList {
  documents: [ClientsOut]
  totalCount: Int
  hasMore: Boolean
}

type ClientsMutation {
  create(data: ClientsIn!): ClientsOut
  update(id: String!, data: ClientsIn!): ClientsOut
  delete(id: String!): Void
}

type ClientsOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ClientsQuery {
  get(id: String!): ClientsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ClientsList
}

scalar Color

scalar DateTime

enum Direction {
  ASC
  DESC
}

input DirectionIn {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type DirectionList {
  documents: [DirectionOut]
  totalCount: Int
  hasMore: Boolean
}

type DirectionMutation {
  create(data: DirectionIn!): DirectionOut
  update(id: String!, data: DirectionIn!): DirectionOut
  delete(id: String!): Void
}

type DirectionOut {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type DirectionQuery {
  get(id: String!): DirectionOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): DirectionList
}

input DirectionsIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type DirectionsList {
  documents: [DirectionsOut]
  totalCount: Int
  hasMore: Boolean
}

type DirectionsMutation {
  create(data: DirectionsIn!): DirectionsOut
  update(id: String!, data: DirectionsIn!): DirectionsOut
  delete(id: String!): Void
}

type DirectionsOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type DirectionsQuery {
  get(id: String!): DirectionsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): DirectionsList
}

type Document {
  data: Json
  deleted: Boolean
  draftId: String
  id: String
  snapshot: String
  type: String
}

type EntityDescriptor {
  actions: [ModelAction]
  fields: [FieldDescriptor]
  name: String
  searchableRefField: String
  securityRules: [SecurityRule]
  withHistory: Boolean
}

type FieldDescriptor {
  name: String
  renderer: String
  required: Boolean
  types: [String]
}

type FieldValidationError {
  field: String
  msg: String
}

enum FilterOperator {
  OR
  AND
  EQUALS
  STARTS_WITH
  ILIKE
  GT
  GTE
  LT
  LTE
}

input FinchSiteGalleryItemIn {
  id: String
  title: String
  image: Image
  darkThemeImage: Image
  text: Wysiwyg
  buttonHref: String
  buttonTitle: String
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FinchSiteGalleryItemList {
  documents: [FinchSiteGalleryItemOut]
  totalCount: Int
  hasMore: Boolean
}

type FinchSiteGalleryItemMutation {
  create(data: FinchSiteGalleryItemIn!): FinchSiteGalleryItemOut
  update(id: String!, data: FinchSiteGalleryItemIn!): FinchSiteGalleryItemOut
  delete(id: String!): Void
}

type FinchSiteGalleryItemOut {
  id: String
  title: String
  image: Image
  darkThemeImage: Image
  text: Wysiwyg
  buttonHref: String
  buttonTitle: String
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FinchSiteGalleryItemQuery {
  get(id: String!): FinchSiteGalleryItemOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FinchSiteGalleryItemList
}

input FinchSitePageBlockIn {
  id: String
  title: String
  text: Wysiwyg
  tags: Json
  blocks: Json
  counters: Boolean
  fulltext: Wysiwyg
  buttonHref: String
  buttonTitle: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchSitePageBlockList {
  documents: [FinchSitePageBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type FinchSitePageBlockMutation {
  create(data: FinchSitePageBlockIn!): FinchSitePageBlockOut
  update(id: String!, data: FinchSitePageBlockIn!): FinchSitePageBlockOut
  delete(id: String!): Void
}

type FinchSitePageBlockOut {
  id: String
  title: String
  text: Wysiwyg
  tags: Json
  blocks: Json
  counters: Boolean
  fulltext: Wysiwyg
  buttonHref: String
  buttonTitle: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchSitePageBlockQuery {
  get(id: String!): FinchSitePageBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FinchSitePageBlockList
}

input FinchSitePageIn {
  id: String
  title: String
  description: Text
  urn: String
  blocks: Json
  lead: Json
  black: Boolean
  image: Image
  article: Boolean
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchSitePageList {
  documents: [FinchSitePageOut]
  totalCount: Int
  hasMore: Boolean
}

type FinchSitePageMutation {
  create(data: FinchSitePageIn!): FinchSitePageOut
  update(id: String!, data: FinchSitePageIn!): FinchSitePageOut
  delete(id: String!): Void
}

type FinchSitePageOut {
  id: String
  title: String
  description: Text
  urn: String
  blocks: Json
  lead: Json
  black: Boolean
  image: Image
  article: Boolean
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchSitePageQuery {
  get(id: String!): FinchSitePageOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FinchSitePageList
}

input FinchWebPageIn {
  id: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchWebPageList {
  documents: [FinchWebPageOut]
  totalCount: Int
  hasMore: Boolean
}

type FinchWebPageMutation {
  create(data: FinchWebPageIn!): FinchWebPageOut
  update(id: String!, data: FinchWebPageIn!): FinchWebPageOut
  delete(id: String!): Void
}

type FinchWebPageOut {
  id: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type FinchWebPageQuery {
  get(id: String!): FinchWebPageOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FinchWebPageList
}

type Form {
  dictionary: Map_String_Map_Scalar
  document: Document
}

input FormBlockIn {
  id: String
  label: String
  fields: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormBlockList {
  documents: [FormBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type FormBlockMutation {
  create(data: FormBlockIn!): FormBlockOut
  update(id: String!, data: FormBlockIn!): FormBlockOut
  delete(id: String!): Void
}

type FormBlockOut {
  id: String
  label: String
  fields: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormBlockQuery {
  get(id: String!): FormBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FormBlockList
}

input FormIn {
  id: String
  blocks: Json
  name: String!
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormList {
  documents: [FormOut]
  totalCount: Int
  hasMore: Boolean
}

type FormMutation {
  create(data: FormIn!): FormOut
  update(id: String!, data: FormIn!): FormOut
  delete(id: String!): Void
}

type FormOut {
  id: String
  blocks: Json
  name: String
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormQuery {
  get(id: String!): FormOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FormList
}

input FormResultIn {
  id: String
  name: String!
  data: Json
  counter: Int
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormResultList {
  documents: [FormResultOut]
  totalCount: Int
  hasMore: Boolean
}

type FormResultMutation {
  create(data: FormResultIn!): FormResultOut
  update(id: String!, data: FormResultIn!): FormResultOut
  delete(id: String!): Void
}

type FormResultOut {
  id: String
  name: String
  data: Json
  counter: Int
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type FormResultQuery {
  get(id: String!): FormResultOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): FormResultList
}

scalar Gallery

input HeroIn {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type HeroList {
  documents: [HeroOut]
  totalCount: Int
  hasMore: Boolean
}

type HeroMutation {
  create(data: HeroIn!): HeroOut
  update(id: String!, data: HeroIn!): HeroOut
  delete(id: String!): Void
}

type HeroOut {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type HeroQuery {
  get(id: String!): HeroOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): HeroList
}

type History {
  entityId: String
  entityName: String
  entries: [HistoryEntry]
}

type HistoryEntry {
  data: Json
  date: DateTime
  entityId: String
  entityName: String
  id: Long
  model: Json
  operationType: TransactionOutboxOperationType
  user: HistoryEntryAuthor
  version: Int
}

type HistoryEntryAuthor {
  id: String
  name: String
}

scalar Image

input InputFilter {
  field: String
  filters: [InputFilter]
  operator: FilterOperator
  value: Json
}

input InputOrder {
  direction: Direction
  field: String
}

input InterviewIn {
  id: String
  title: String
  text: Wysiwyg
  button: Json
  links: Json
  signUpButton: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type InterviewList {
  documents: [InterviewOut]
  totalCount: Int
  hasMore: Boolean
}

type InterviewMutation {
  create(data: InterviewIn!): InterviewOut
  update(id: String!, data: InterviewIn!): InterviewOut
  delete(id: String!): Void
}

type InterviewOut {
  id: String
  title: String
  text: Wysiwyg
  button: Json
  links: Json
  signUpButton: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type InterviewQuery {
  get(id: String!): InterviewOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): InterviewList
}

scalar Json

input LandingIn {
  id: String
  title: String
  description: Text
  image: Image
  themecolor: Color
  blocks: Json
  bodyscripts: Text
  headscripts: Text
  leadgen: Json
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type LandingList {
  documents: [LandingOut]
  totalCount: Int
  hasMore: Boolean
}

type LandingMutation {
  create(data: LandingIn!): LandingOut
  update(id: String!, data: LandingIn!): LandingOut
  delete(id: String!): Void
}

type LandingOut {
  id: String
  title: String
  description: Text
  image: Image
  themecolor: Color
  blocks: Json
  bodyscripts: Text
  headscripts: Text
  leadgen: Json
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type LandingQuery {
  get(id: String!): LandingOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): LandingList
}

input LinkIn {
  id: String
  text: String
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type LinkList {
  documents: [LinkOut]
  totalCount: Int
  hasMore: Boolean
}

type LinkMutation {
  create(data: LinkIn!): LinkOut
  update(id: String!, data: LinkIn!): LinkOut
  delete(id: String!): Void
}

type LinkOut {
  id: String
  text: String
  url: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type LinkQuery {
  get(id: String!): LinkOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): LinkList
}

# Long type
scalar Long

scalar Map_String_EntityDescriptor_Scalar

scalar Map_String_List_Scalar

scalar Map_String_Map_Scalar

input MaterialBlockIn {
  id: String
  title: String
  description: Text
  image: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MaterialBlockList {
  documents: [MaterialBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type MaterialBlockMutation {
  create(data: MaterialBlockIn!): MaterialBlockOut
  update(id: String!, data: MaterialBlockIn!): MaterialBlockOut
  delete(id: String!): Void
}

type MaterialBlockOut {
  id: String
  title: String
  description: Text
  image: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MaterialBlockQuery {
  get(id: String!): MaterialBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): MaterialBlockList
}

input MenuIn {
  id: String
  title: String
  items: Json
  code: String
  photos: Gallery
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

input MenuItemIn {
  id: String
  title: String
  visible: Boolean
  href: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MenuItemList {
  documents: [MenuItemOut]
  totalCount: Int
  hasMore: Boolean
}

type MenuItemMutation {
  create(data: MenuItemIn!): MenuItemOut
  update(id: String!, data: MenuItemIn!): MenuItemOut
  delete(id: String!): Void
}

type MenuItemOut {
  id: String
  title: String
  visible: Boolean
  href: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MenuItemQuery {
  get(id: String!): MenuItemOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): MenuItemList
}

type MenuList {
  documents: [MenuOut]
  totalCount: Int
  hasMore: Boolean
}

type MenuMutation {
  create(data: MenuIn!): MenuOut
  update(id: String!, data: MenuIn!): MenuOut
  delete(id: String!): Void
}

type MenuOut {
  id: String
  title: String
  items: Json
  code: String
  photos: Gallery
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type MenuQuery {
  get(id: String!): MenuOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): MenuList
}

type Meta {
  components: Map_String_EntityDescriptor_Scalar
  entities: [EntityDescriptor]
  handbooks: Map_String_List_Scalar
}

input MetaIn {
  id: String
  title: String
  description: String
  image: Image
  custom: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MetaList {
  documents: [MetaOut]
  totalCount: Int
  hasMore: Boolean
}

type MetaMutation {
  create(data: MetaIn!): MetaOut
  update(id: String!, data: MetaIn!): MetaOut
  delete(id: String!): Void
}

type MetaOut {
  id: String
  title: String
  description: String
  image: Image
  custom: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type MetaQuery {
  get(id: String!): MetaOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): MetaList
}

type ModelAction {
  name: String
  type: ActionType
}

type Mutation {
  create(type: String, data: Json, force: Boolean): SaveResult
  update(type: String, id: String, data: Json, force: Boolean): SaveResult
  delete(type: String, id: String): Void
  PageMutation: PageMutation
  FormResultMutation: FormResultMutation
  FinchWebPageMutation: FinchWebPageMutation
  RoadMapPointMutation: RoadMapPointMutation
  MaterialBlockMutation: MaterialBlockMutation
  ThemeMutation: ThemeMutation
  TeamMutation: TeamMutation
  TovarMutation: TovarMutation
  Services2Mutation: Services2Mutation
  DirectionsMutation: DirectionsMutation
  BlockMutation: BlockMutation
  ServicePointMutation: ServicePointMutation
  FinchSitePageBlockMutation: FinchSitePageBlockMutation
  TagsMutation: TagsMutation
  ClientMutation: ClientMutation
  LinkMutation: LinkMutation
  RoleMutation: RoleMutation
  RoadMapMutation: RoadMapMutation
  InterviewMutation: InterviewMutation
  ProjectMutation: ProjectMutation
  BoxesBlockMutation: BoxesBlockMutation
  ClientsBlockMutation: ClientsBlockMutation
  NewYearMutation: NewYearMutation
  FinchSiteGalleryItemMutation: FinchSiteGalleryItemMutation
  MetaMutation: MetaMutation
  DirectionMutation: DirectionMutation
  ButtonMutation: ButtonMutation
  ServiceMutation: ServiceMutation
  PromoMutation: PromoMutation
  TargetsMutation: TargetsMutation
  BoxesBlockItemMutation: BoxesBlockItemMutation
  UserMutation: UserMutation
  ServicesMutation: ServicesMutation
  WebConfigMutation: WebConfigMutation
  ProjectsMutation: ProjectsMutation
  TargetMutation: TargetMutation
  LandingMutation: LandingMutation
  TagsBlockMutation: TagsBlockMutation
  TagMutation: TagMutation
  HeroMutation: HeroMutation
  FormBlockMutation: FormBlockMutation
  ClientsMutation: ClientsMutation
  MenuItemMutation: MenuItemMutation
  TeamBlockMutation: TeamBlockMutation
  MenuMutation: MenuMutation
  FinchSitePageMutation: FinchSitePageMutation
  FormMutation: FormMutation
  TeamMemberMutation: TeamMemberMutation
  TovarRuleMutation: TovarRuleMutation
}

input NewYearIn {
  id: String
  url: String
  title: String
  text: String
  button: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type NewYearList {
  documents: [NewYearOut]
  totalCount: Int
  hasMore: Boolean
}

type NewYearMutation {
  create(data: NewYearIn!): NewYearOut
  update(id: String!, data: NewYearIn!): NewYearOut
  delete(id: String!): Void
}

type NewYearOut {
  id: String
  url: String
  title: String
  text: String
  button: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type NewYearQuery {
  get(id: String!): NewYearOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): NewYearList
}

enum OperationType {
  CREATE
  READ
  UPDATE
  DELETE
  TABLE
  AUTOCOMPLETE
}

input PageIn {
  id: String
  title: String
  urn: String
  items: Json
  leadgen: Json
  image: Image
  navLinks: Json
  theme: Json
  social: Json
  meta: Json
  bodyScripts: Text
  headScripts: Text
  email: String
  themeColor: Color
  gradientColor: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type PageList {
  documents: [PageOut]
  totalCount: Int
  hasMore: Boolean
}

type PageMutation {
  create(data: PageIn!): PageOut
  update(id: String!, data: PageIn!): PageOut
  delete(id: String!): Void
}

type PageOut {
  id: String
  title: String
  urn: String
  items: Json
  leadgen: Json
  image: Image
  navLinks: Json
  theme: Json
  social: Json
  meta: Json
  bodyScripts: Text
  headScripts: Text
  email: String
  themeColor: Color
  gradientColor: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
  cmsupdatedate: DateTime
  cmseditedby: Json
}

type PageQuery {
  get(id: String!): PageOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): PageList
}

input ProjectIn {
  id: String
  title: String
  text: Wysiwyg
  image: Image
  androidLink: String
  iosLink: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ProjectList {
  documents: [ProjectOut]
  totalCount: Int
  hasMore: Boolean
}

type ProjectMutation {
  create(data: ProjectIn!): ProjectOut
  update(id: String!, data: ProjectIn!): ProjectOut
  delete(id: String!): Void
}

type ProjectOut {
  id: String
  title: String
  text: Wysiwyg
  image: Image
  androidLink: String
  iosLink: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ProjectQuery {
  get(id: String!): ProjectOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ProjectList
}

input ProjectsIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ProjectsList {
  documents: [ProjectsOut]
  totalCount: Int
  hasMore: Boolean
}

type ProjectsMutation {
  create(data: ProjectsIn!): ProjectsOut
  update(id: String!, data: ProjectsIn!): ProjectsOut
  delete(id: String!): Void
}

type ProjectsOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ProjectsQuery {
  get(id: String!): ProjectsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ProjectsList
}

input PromoIn {
  id: String
  text: String
  image: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type PromoList {
  documents: [PromoOut]
  totalCount: Int
  hasMore: Boolean
}

type PromoMutation {
  create(data: PromoIn!): PromoOut
  update(id: String!, data: PromoIn!): PromoOut
  delete(id: String!): Void
}

type PromoOut {
  id: String
  text: String
  image: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type PromoQuery {
  get(id: String!): PromoOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): PromoList
}

type Query {
  scriptSuggestions(operation: OperationType, fields: [Json]): Json
  search(
    entityName: String
    first: Int
    after: String
    search: String
  ): SortedSearch
  historyEntry(id: String): HistoryEntry
  meta(type: String): Meta
  get(type: String, id: String): Form
  history(entityName: String, entityId: String): History
  table(
    type: String
    page: Int
    pageSize: Int
    filters: [InputFilter]
    orders: [InputOrder]
  ): Table
  simpleAuth(username: String, password: String): String
  PageQuery: PageQuery
  FormResultQuery: FormResultQuery
  FinchWebPageQuery: FinchWebPageQuery
  RoadMapPointQuery: RoadMapPointQuery
  MaterialBlockQuery: MaterialBlockQuery
  ThemeQuery: ThemeQuery
  TeamQuery: TeamQuery
  TovarQuery: TovarQuery
  Services2Query: Services2Query
  DirectionsQuery: DirectionsQuery
  BlockQuery: BlockQuery
  ServicePointQuery: ServicePointQuery
  FinchSitePageBlockQuery: FinchSitePageBlockQuery
  TagsQuery: TagsQuery
  ClientQuery: ClientQuery
  LinkQuery: LinkQuery
  RoleQuery: RoleQuery
  RoadMapQuery: RoadMapQuery
  InterviewQuery: InterviewQuery
  ProjectQuery: ProjectQuery
  BoxesBlockQuery: BoxesBlockQuery
  ClientsBlockQuery: ClientsBlockQuery
  NewYearQuery: NewYearQuery
  FinchSiteGalleryItemQuery: FinchSiteGalleryItemQuery
  MetaQuery: MetaQuery
  DirectionQuery: DirectionQuery
  ButtonQuery: ButtonQuery
  ServiceQuery: ServiceQuery
  PromoQuery: PromoQuery
  TargetsQuery: TargetsQuery
  BoxesBlockItemQuery: BoxesBlockItemQuery
  UserQuery: UserQuery
  ServicesQuery: ServicesQuery
  WebConfigQuery: WebConfigQuery
  ProjectsQuery: ProjectsQuery
  TargetQuery: TargetQuery
  LandingQuery: LandingQuery
  TagsBlockQuery: TagsBlockQuery
  TagQuery: TagQuery
  HeroQuery: HeroQuery
  FormBlockQuery: FormBlockQuery
  ClientsQuery: ClientsQuery
  MenuItemQuery: MenuItemQuery
  TeamBlockQuery: TeamBlockQuery
  MenuQuery: MenuQuery
  FinchSitePageQuery: FinchSitePageQuery
  FormQuery: FormQuery
  TeamMemberQuery: TeamMemberQuery
  TovarRuleQuery: TovarRuleQuery
}

type RefWithTitle {
  title: String
  value: String
}

input RoadMapIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type RoadMapList {
  documents: [RoadMapOut]
  totalCount: Int
  hasMore: Boolean
}

type RoadMapMutation {
  create(data: RoadMapIn!): RoadMapOut
  update(id: String!, data: RoadMapIn!): RoadMapOut
  delete(id: String!): Void
}

type RoadMapOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

input RoadMapPointIn {
  id: String
  title: String
  text: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type RoadMapPointList {
  documents: [RoadMapPointOut]
  totalCount: Int
  hasMore: Boolean
}

type RoadMapPointMutation {
  create(data: RoadMapPointIn!): RoadMapPointOut
  update(id: String!, data: RoadMapPointIn!): RoadMapPointOut
  delete(id: String!): Void
}

type RoadMapPointOut {
  id: String
  title: String
  text: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type RoadMapPointQuery {
  get(id: String!): RoadMapPointOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): RoadMapPointList
}

type RoadMapQuery {
  get(id: String!): RoadMapOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): RoadMapList
}

input RoleIn {
  id: String
  title: String
  cmscreatedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmspublished: Boolean
}

type RoleList {
  documents: [RoleOut]
  totalCount: Int
  hasMore: Boolean
}

type RoleMutation {
  create(data: RoleIn!): RoleOut
  update(id: String!, data: RoleIn!): RoleOut
  delete(id: String!): Void
}

type RoleOut {
  id: String
  title: String
  cmscreatedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmspublished: Boolean
}

type RoleQuery {
  get(id: String!): RoleOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): RoleList
}

type SaveResult {
  document: Document
  errors: [FieldValidationError]
}

type SecurityRule {
  operation: OperationType
  roles: [RefWithTitle]
}

input ServiceIn {
  id: String
  title: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ServiceList {
  documents: [ServiceOut]
  totalCount: Int
  hasMore: Boolean
}

type ServiceMutation {
  create(data: ServiceIn!): ServiceOut
  update(id: String!, data: ServiceIn!): ServiceOut
  delete(id: String!): Void
}

type ServiceOut {
  id: String
  title: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

input ServicePointIn {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ServicePointList {
  documents: [ServicePointOut]
  totalCount: Int
  hasMore: Boolean
}

type ServicePointMutation {
  create(data: ServicePointIn!): ServicePointOut
  update(id: String!, data: ServicePointIn!): ServicePointOut
  delete(id: String!): Void
}

type ServicePointOut {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ServicePointQuery {
  get(id: String!): ServicePointOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ServicePointList
}

type ServiceQuery {
  get(id: String!): ServiceOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ServiceList
}

input Services2In {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type Services2List {
  documents: [Services2Out]
  totalCount: Int
  hasMore: Boolean
}

type Services2Mutation {
  create(data: Services2In!): Services2Out
  update(id: String!, data: Services2In!): Services2Out
  delete(id: String!): Void
}

type Services2Out {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type Services2Query {
  get(id: String!): Services2Out
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): Services2List
}

input ServicesIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ServicesList {
  documents: [ServicesOut]
  totalCount: Int
  hasMore: Boolean
}

type ServicesMutation {
  create(data: ServicesIn!): ServicesOut
  update(id: String!, data: ServicesIn!): ServicesOut
  delete(id: String!): Void
}

type ServicesOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ServicesQuery {
  get(id: String!): ServicesOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ServicesList
}

type SortedSearch {
  documents: [Json]
  hasMore: Boolean
  scroll: String
}

type Table {
  documents: [Document]
  hasMore: Boolean
  totalCount: Long
}

input TagIn {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagList {
  documents: [TagOut]
  totalCount: Int
  hasMore: Boolean
}

type TagMutation {
  create(data: TagIn!): TagOut
  update(id: String!, data: TagIn!): TagOut
  delete(id: String!): Void
}

type TagOut {
  id: String
  title: String
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagQuery {
  get(id: String!): TagOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TagList
}

input TagsBlockIn {
  id: String
  title: String
  description: Text
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagsBlockList {
  documents: [TagsBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type TagsBlockMutation {
  create(data: TagsBlockIn!): TagsBlockOut
  update(id: String!, data: TagsBlockIn!): TagsBlockOut
  delete(id: String!): Void
}

type TagsBlockOut {
  id: String
  title: String
  description: Text
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagsBlockQuery {
  get(id: String!): TagsBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TagsBlockList
}

input TagsIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagsList {
  documents: [TagsOut]
  totalCount: Int
  hasMore: Boolean
}

type TagsMutation {
  create(data: TagsIn!): TagsOut
  update(id: String!, data: TagsIn!): TagsOut
  delete(id: String!): Void
}

type TagsOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TagsQuery {
  get(id: String!): TagsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TagsList
}

input TargetIn {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TargetList {
  documents: [TargetOut]
  totalCount: Int
  hasMore: Boolean
}

type TargetMutation {
  create(data: TargetIn!): TargetOut
  update(id: String!, data: TargetIn!): TargetOut
  delete(id: String!): Void
}

type TargetOut {
  id: String
  title: String
  text: Wysiwyg
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TargetQuery {
  get(id: String!): TargetOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TargetList
}

input TargetsIn {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TargetsList {
  documents: [TargetsOut]
  totalCount: Int
  hasMore: Boolean
}

type TargetsMutation {
  create(data: TargetsIn!): TargetsOut
  update(id: String!, data: TargetsIn!): TargetsOut
  delete(id: String!): Void
}

type TargetsOut {
  id: String
  items: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TargetsQuery {
  get(id: String!): TargetsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TargetsList
}

input TeamBlockIn {
  id: String
  title: String
  description: Wysiwyg
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamBlockList {
  documents: [TeamBlockOut]
  totalCount: Int
  hasMore: Boolean
}

type TeamBlockMutation {
  create(data: TeamBlockIn!): TeamBlockOut
  update(id: String!, data: TeamBlockIn!): TeamBlockOut
  delete(id: String!): Void
}

type TeamBlockOut {
  id: String
  title: String
  description: Wysiwyg
  blocks: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamBlockQuery {
  get(id: String!): TeamBlockOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TeamBlockList
}

input TeamIn {
  id: String
  members: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamList {
  documents: [TeamOut]
  totalCount: Int
  hasMore: Boolean
}

input TeamMemberIn {
  id: String
  name: String
  position: String
  photo: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamMemberList {
  documents: [TeamMemberOut]
  totalCount: Int
  hasMore: Boolean
}

type TeamMemberMutation {
  create(data: TeamMemberIn!): TeamMemberOut
  update(id: String!, data: TeamMemberIn!): TeamMemberOut
  delete(id: String!): Void
}

type TeamMemberOut {
  id: String
  name: String
  position: String
  photo: Image
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamMemberQuery {
  get(id: String!): TeamMemberOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TeamMemberList
}

type TeamMutation {
  create(data: TeamIn!): TeamOut
  update(id: String!, data: TeamIn!): TeamOut
  delete(id: String!): Void
}

type TeamOut {
  id: String
  members: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TeamQuery {
  get(id: String!): TeamOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TeamList
}

scalar Text

input ThemeIn {
  id: String
  dark: Boolean
  adaptive: Boolean
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ThemeList {
  documents: [ThemeOut]
  totalCount: Int
  hasMore: Boolean
}

type ThemeMutation {
  create(data: ThemeIn!): ThemeOut
  update(id: String!, data: ThemeIn!): ThemeOut
  delete(id: String!): Void
}

type ThemeOut {
  id: String
  dark: Boolean
  adaptive: Boolean
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type ThemeQuery {
  get(id: String!): ThemeOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ThemeList
}

input TovarIn {
  id: String
  title: String
  rules: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TovarList {
  documents: [TovarOut]
  totalCount: Int
  hasMore: Boolean
}

type TovarMutation {
  create(data: TovarIn!): TovarOut
  update(id: String!, data: TovarIn!): TovarOut
  delete(id: String!): Void
}

type TovarOut {
  id: String
  title: String
  rules: Json
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TovarQuery {
  get(id: String!): TovarOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TovarList
}

input TovarRuleIn {
  id: String
  phrase: String
  exceptions: Text
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TovarRuleList {
  documents: [TovarRuleOut]
  totalCount: Int
  hasMore: Boolean
}

type TovarRuleMutation {
  create(data: TovarRuleIn!): TovarRuleOut
  update(id: String!, data: TovarRuleIn!): TovarRuleOut
  delete(id: String!): Void
}

type TovarRuleOut {
  id: String
  phrase: String
  exceptions: Text
  cmscreationdate: DateTime
  cmscreatedby: Json
  cmspublished: Boolean
}

type TovarRuleQuery {
  get(id: String!): TovarRuleOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TovarRuleList
}

enum TransactionOutboxOperationType {
  SAVE
  CREATE
  DELETE
}

input UserIn {
  id: String
  username: String
  password: String
  roles: Json
  cmscreatedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmspublished: Boolean
}

type UserList {
  documents: [UserOut]
  totalCount: Int
  hasMore: Boolean
}

type UserMutation {
  create(data: UserIn!): UserOut
  update(id: String!, data: UserIn!): UserOut
  delete(id: String!): Void
}

type UserOut {
  id: String
  username: String
  password: String
  roles: Json
  cmscreatedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmspublished: Boolean
}

type UserQuery {
  loginAuth(username: String!, password: String!): String
  get(id: String!): UserOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): UserList
}

# Empty return type
scalar Void

input WebConfigIn {
  id: String
  title: String
  headscript: Text
  bodyscript: Text
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type WebConfigList {
  documents: [WebConfigOut]
  totalCount: Int
  hasMore: Boolean
}

type WebConfigMutation {
  create(data: WebConfigIn!): WebConfigOut
  update(id: String!, data: WebConfigIn!): WebConfigOut
  delete(id: String!): Void
}

type WebConfigOut {
  id: String
  title: String
  headscript: Text
  bodyscript: Text
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
  cmscreatedby: Json
  cmseditedby: Json
  cmspublished: Boolean
}

type WebConfigQuery {
  get(id: String!): WebConfigOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): WebConfigList
}

scalar Wysiwyg
