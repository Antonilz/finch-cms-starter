directive @hasRole(role: String) on FIELD

enum ActionType {
  QUERY
  MUTATION
}

enum BeforeOrAfterOperation {
  BEFORE
  AFTER
}

input ButtonElementsIn {
  id: String
  name: String!
  payload: Text
  ttt: String
}

type ButtonElementsList {
  documents: [ButtonElementsOut]
  totalCount: Int
  hasMore: Boolean
}

type ButtonElementsMutation {
  create(data: ButtonElementsIn!): ButtonElementsOut
  update(id: String!, data: ButtonElementsIn!): ButtonElementsOut
  delete(id: String!): Void
}

type ButtonElementsOut {
  id: String
  name: String
  payload: Text
  ttt: String
}

type ButtonElementsQuery {
  get(id: String!): ButtonElementsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ButtonElementsList
}

scalar DateTime

enum Direction {
  ASC
  DESC
}

type Document {
  data: Json
  deleted: Boolean
  draftId: String
  id: String
  snapshot: String
  type: String
}

type EntityDescriptor {
  actions: [ModelAction]
  fields: [FieldDescriptor]
  name: String
  searchableRefField: String
  securityRules: [SecurityRule]
  withHistory: Boolean
}

enum EntityFieldPrimitiveType {
  UUID
  NUMBER
  STRING
  TEXT
  WYSIWYG
  IMAGE
  GALLERY
  COLOR
  JSON
  DATE
  DATE_TIME
  BOOLEAN
  ATTACHMENT
  GPOINT
  PASSWORD
  SYSTEM_CREATED_AT
  SYSTEM_UPDATED_AT
  SYSTEM_CREATED_BY
  SYSTEM_UPDATED_BY
}

type FieldDescriptor {
  config: FieldDescriptorConfig
  name: String
  renderer: String
  required: Boolean
  types: [String]
}

type FieldDescriptorConfig {
  multiple: Boolean
  url: String
}

type FieldValidationError {
  field: String
  msg: String
}

enum FilterOperator {
  OR
  AND
  EQUALS
  STARTS_WITH
  ILIKE
  GT
  GTE
  LT
  LTE
  NE
}

type Form {
  dictionary: Map_String_Map_Scalar
  document: Document
}

input HeaderElementsIn {
  id: String
  name: String
  payload: Text
  theme: String
  figmaUrl: String
}

type HeaderElementsList {
  documents: [HeaderElementsOut]
  totalCount: Int
  hasMore: Boolean
}

type HeaderElementsMutation {
  create(data: HeaderElementsIn!): HeaderElementsOut
  update(id: String!, data: HeaderElementsIn!): HeaderElementsOut
  delete(id: String!): Void
}

type HeaderElementsOut {
  id: String
  name: String
  payload: Text
  theme: String
  figmaUrl: String
}

type HeaderElementsQuery {
  get(id: String!): HeaderElementsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): HeaderElementsList
}

type History {
  entityId: String
  entityName: String
  entries: [HistoryEntry]
}

type HistoryEntry {
  data: Json
  date: DateTime
  entityId: String
  entityName: String
  id: Long
  model: Json
  operationType: TransactionOutboxOperationType
  user: HistoryEntryAuthor
  version: Int
}

type HistoryEntryAuthor {
  id: String
  name: String
}

scalar Image

input InputElementsIn {
  id: String
  name: String
  payload: Text
  theme: String
  figmaUrl: String
}

type InputElementsList {
  documents: [InputElementsOut]
  totalCount: Int
  hasMore: Boolean
}

type InputElementsMutation {
  create(data: InputElementsIn!): InputElementsOut
  update(id: String!, data: InputElementsIn!): InputElementsOut
  delete(id: String!): Void
}

type InputElementsOut {
  id: String
  name: String
  payload: Text
  theme: String
  figmaUrl: String
}

type InputElementsQuery {
  get(id: String!): InputElementsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): InputElementsList
}

input InputFilter {
  field: String
  filters: [InputFilter]
  operator: FilterOperator
  value: Json
}

input InputOrder {
  direction: Direction
  field: String
}

scalar Json

# Long type
scalar Long

scalar Map_String_EntityDescriptor_Scalar

scalar Map_String_List_Scalar

scalar Map_String_Map_Scalar

input MenuIn {
  id: String
  name: String
  items: Json!
}

type MenuList {
  documents: [MenuOut]
  totalCount: Int
  hasMore: Boolean
}

type MenuMutation {
  create(data: MenuIn!): MenuOut
  update(id: String!, data: MenuIn!): MenuOut
  delete(id: String!): Void
}

type MenuOut {
  id: String
  name: String
  items: Json
}

type MenuQuery {
  get(id: String!): MenuOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): MenuList
}

type Meta {
  components: Map_String_EntityDescriptor_Scalar
  embeds: Map_String_EntityDescriptor_Scalar
  entities: [EntityDescriptor]
  handbooks: Map_String_List_Scalar
}

type ModelAction {
  name: String
  type: ActionType
}

type Mutation {
  create(type: String, data: Json, force: Boolean): SaveResult
  update(type: String, id: String, data: Json, force: Boolean): SaveResult
  delete(type: String, id: String): Void
  ButtonElementsMutation: ButtonElementsMutation
  HeaderElementsMutation: HeaderElementsMutation
  MenuMutation: MenuMutation
  ScriptConfigMutation: ScriptConfigMutation
  UserMutation: UserMutation
  TextElementsMutation: TextElementsMutation
  InputElementsMutation: InputElementsMutation
  PageMutation: PageMutation
}

enum OperationType {
  CREATE
  READ
  UPDATE
  DELETE
  TABLE
  AUTOCOMPLETE
}

input PageIn {
  id: String
  url: String!
  title: String!
  description: Text
  image: Image
  blocks: Json
  isArticle: Boolean
}

type PageList {
  documents: [PageOut]
  totalCount: Int
  hasMore: Boolean
}

type PageMutation {
  create(data: PageIn!): PageOut
  update(id: String!, data: PageIn!): PageOut
  delete(id: String!): Void
}

type PageOut {
  id: String
  url: String
  title: String
  description: Text
  image: Image
  blocks: Json
  isArticle: Boolean
}

type PageQuery {
  get(id: String!): PageOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): PageList
}

type Query {
  scriptSuggestions(operation: OperationType, fields: [Json]): Json
  search(
    entityName: String
    first: Int
    after: String
    search: String
  ): SortedSearch
  historyEntry(id: String): HistoryEntry
  meta(type: String): Meta
  get(type: String, id: String): Form
  history(entityName: String, entityId: String): History
  table(
    type: String
    page: Int
    pageSize: Int
    filters: [InputFilter]
    orders: [InputOrder]
  ): Table
  ButtonElementsQuery: ButtonElementsQuery
  HeaderElementsQuery: HeaderElementsQuery
  MenuQuery: MenuQuery
  ScriptConfigQuery: ScriptConfigQuery
  UserQuery: UserQuery
  TextElementsQuery: TextElementsQuery
  InputElementsQuery: InputElementsQuery
  PageQuery: PageQuery
}

enum Relationship {
  REF
  MANY_TO_MANY
  ONE_TO_MANY
  MANY_TO_ONE
}

type SaveResult {
  document: Document
  errors: [FieldValidationError]
}

input ScriptConfigIn {
  id: String
  name: String!
  headScript: Text
  bodyScript: Text
}

type ScriptConfigList {
  documents: [ScriptConfigOut]
  totalCount: Int
  hasMore: Boolean
}

type ScriptConfigMutation {
  create(data: ScriptConfigIn!): ScriptConfigOut
  update(id: String!, data: ScriptConfigIn!): ScriptConfigOut
  delete(id: String!): Void
}

type ScriptConfigOut {
  id: String
  name: String
  headScript: Text
  bodyScript: Text
}

type ScriptConfigQuery {
  get(id: String!): ScriptConfigOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): ScriptConfigList
}

type SecurityRule {
  operation: OperationType
  roles: [String]
}

type SortedSearch {
  documents: [Json]
  hasMore: Boolean
  scroll: String
}

enum StorageType {
  KV
  POSTGRES
  FILE
}

type Table {
  documents: [Document]
  hasMore: Boolean
  totalCount: Long
}

scalar Text

input TextElementsIn {
  id: String
  name: String!
  payload: Text
  theme: String
  figmaUrl: String
}

type TextElementsList {
  documents: [TextElementsOut]
  totalCount: Int
  hasMore: Boolean
}

type TextElementsMutation {
  create(data: TextElementsIn!): TextElementsOut
  update(id: String!, data: TextElementsIn!): TextElementsOut
  delete(id: String!): Void
}

type TextElementsOut {
  id: String
  name: String
  payload: Text
  theme: String
  figmaUrl: String
}

type TextElementsQuery {
  get(id: String!): TextElementsOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): TextElementsList
}

enum TransactionOutboxOperationType {
  SAVE
  CREATE
  DELETE
}

input UserIn {
  id: String
  username: String
  password: String
  roles: [String]
  cmscreatedby: Json
  cmseditedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
}

type UserList {
  documents: [UserOut]
  totalCount: Int
  hasMore: Boolean
}

type UserMutation {
  create(data: UserIn!): UserOut
  update(id: String!, data: UserIn!): UserOut
  delete(id: String!): Void
}

type UserOut {
  id: String
  username: String
  password: String
  roles: [String]
  cmscreatedby: Json
  cmseditedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
}

type UserQuery {
  get(id: String!): UserOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): UserList
}

# Empty return type
scalar Void
