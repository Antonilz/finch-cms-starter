directive @hasRole(role: String) on FIELD

enum ActionType {
  QUERY
  MUTATION
}

enum BeforeOrAfterOperation {
  BEFORE
  AFTER
}

scalar DateTime

enum Direction {
  ASC
  DESC
}

type Document {
  data: Json
  deleted: Boolean
  draftId: String
  id: String
  snapshot: String
  type: String
}

type EntityDescriptor {
  actions: [ModelAction]
  fields: [FieldDescriptor]
  name: String
  searchableRefField: String
  securityRules: [SecurityRule]
  withHistory: Boolean
}

enum EntityFieldPrimitiveType {
  UUID
  NUMBER
  STRING
  TEXT
  WYSIWYG
  IMAGE
  GALLERY
  COLOR
  JSON
  DATE
  DATE_TIME
  BOOLEAN
  ATTACHMENT
  GPOINT
  PASSWORD
  SYSTEM_CREATED_AT
  SYSTEM_UPDATED_AT
  SYSTEM_CREATED_BY
  SYSTEM_UPDATED_BY
}

type FieldDescriptor {
  config: FieldDescriptorConfig
  name: String
  renderer: String
  required: Boolean
  types: [String]
}

type FieldDescriptorConfig {
  multiple: Boolean
  url: String
}

type FieldValidationError {
  field: String
  msg: String
}

enum FilterOperator {
  OR
  AND
  EQUALS
  STARTS_WITH
  ILIKE
  GT
  GTE
  LT
  LTE
  NE
}

type Form {
  dictionary: Map_String_Map_Scalar
  document: Document
}

type History {
  entityId: String
  entityName: String
  entries: [HistoryEntry]
}

type HistoryEntry {
  data: Json
  date: DateTime
  entityId: String
  entityName: String
  id: Long
  model: Json
  operationType: TransactionOutboxOperationType
  user: HistoryEntryAuthor
  version: Int
}

type HistoryEntryAuthor {
  id: String
  name: String
}

input InputFilter {
  field: String
  filters: [InputFilter]
  operator: FilterOperator
  value: Json
}

input InputOrder {
  direction: Direction
  field: String
}

scalar Json

# Long type
scalar Long

scalar Map_String_EntityDescriptor_Scalar

scalar Map_String_List_Scalar

scalar Map_String_Map_Scalar

type Meta {
  components: Map_String_EntityDescriptor_Scalar
  embeds: Map_String_EntityDescriptor_Scalar
  entities: [EntityDescriptor]
  handbooks: Map_String_List_Scalar
}

type ModelAction {
  name: String
  type: ActionType
}

type Mutation {
  create(type: String, data: Json, force: Boolean): SaveResult
  update(type: String, id: String, data: Json, force: Boolean): SaveResult
  delete(type: String, id: String): Void
  UserMutation: UserMutation
}

enum OperationType {
  CREATE
  READ
  UPDATE
  DELETE
  TABLE
  AUTOCOMPLETE
}

type Query {
  scriptSuggestions(operation: OperationType, fields: [Json]): Json
  search(
    entityName: String
    first: Int
    after: String
    search: String
  ): SortedSearch
  historyEntry(id: String): HistoryEntry
  meta(type: String): Meta
  get(type: String, id: String): Form
  history(entityName: String, entityId: String): History
  table(
    type: String
    page: Int
    pageSize: Int
    filters: [InputFilter]
    orders: [InputOrder]
  ): Table
  UserQuery: UserQuery
}

enum Relationship {
  REF
  MANY_TO_MANY
  ONE_TO_MANY
  MANY_TO_ONE
}

type SaveResult {
  document: Document
  errors: [FieldValidationError]
}

type SecurityRule {
  operation: OperationType
  roles: [String]
}

type SortedSearch {
  documents: [Json]
  hasMore: Boolean
  scroll: String
}

enum StorageType {
  KV
  POSTGRES
  FILE
}

type Table {
  documents: [Document]
  hasMore: Boolean
  totalCount: Long
}

enum TransactionOutboxOperationType {
  SAVE
  CREATE
  DELETE
}

input UserIn {
  id: String
  username: String
  password: String
  roles: [String]
  cmscreatedby: Json
  cmseditedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
}

type UserList {
  documents: [UserOut]
  totalCount: Int
  hasMore: Boolean
}

type UserMutation {
  create(data: UserIn!): UserOut
  update(id: String!, data: UserIn!): UserOut
  delete(id: String!): Void
}

type UserOut {
  id: String
  username: String
  password: String
  roles: [String]
  cmscreatedby: Json
  cmseditedby: Json
  cmscreationdate: DateTime
  cmsupdatedate: DateTime
}

type UserQuery {
  get(id: String!): UserOut
  list(
    page: Int = 0
    pageSize: Int = 20
    filters: [InputFilter]
    orders: [InputOrder]
  ): UserList
}

# Empty return type
scalar Void
